const { markdownv2: format } = require('telegram-format')
const dedent = require('dedent')
const { Scenes, Markup } = require('telegraf')
const qiwiAccsManager = require('../../lib/QiwiAccsManager').getInstance()
const { userFormatNumber } = require('../../lib/utils')
const { onWithdraw } = require('../../eventHandlers')

const { escape, bold, monospaceBlock } = format
const wizardScene = new Scenes.BaseScene('WITHDRAW_SCENE_ID')
const getKBCancel = (isWithConfirm = false) => {
  const rows = !isWithConfirm
    ? [['‚ùå–û—Ç–º–µ–Ω–∞']]
    : [['‚úÖ–í—Å—ë –≤–µ—Ä–Ω–æ'], ['‚ùå–û—Ç–º–µ–Ω–∞']]

  return Markup.keyboard(rows).oneTime().resize().reply_markup
}

wizardScene.enter(async (ctx) => {
  const { qiwiAccId } = ctx.scene.session.state
  if (!qiwiAccsManager.hasById(qiwiAccId)) {
    await ctx.reply('–ö–∏–≤–∏ –∞–∫–∫–∞—É–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return await ctx.scene.leave()
  }

  return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞', { reply_markup: getKBCancel() })
})

wizardScene.hears(/‚ùå–û—Ç–º–µ–Ω–∞/i, async (ctx) => {
  await ctx.scene.leave()
  return await ctx.scene.enter('MAIN_MENU_SCENE_ID')
})

wizardScene.hears(/‚úÖ–í—Å—ë –≤–µ—Ä–Ω–æ/i, async (ctx) => {
  const { amount, qiwiAccId, card } = ctx.scene.session.state

  if (!amount || !qiwiAccId || !card || !qiwiAccsManager.hasById(qiwiAccId))
    return await ctx.reply(`–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`, { reply_markup: getKBCancel(true) })

  const qiwi = qiwiAccsManager.getById(qiwiAccId)
  try {
    await qiwi.sendRubToCard({
      amount,
      card,
    })
  } catch (err) {
    const errMsgText = err.message || err.description || '[no error text]'
    const errInfoText = err.response && err.response.data
      ? `${errMsgText}\n${JSON.stringify(err.response.data, null, 2)}`
      : errMsgText

    return await ctx.replyWithMarkdownV2(dedent`
      –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ${bold(escape(amount.toString()))} —Ä—É–± —Å –∫–∏–≤–∏ ${bold(escape(qiwi.wallet))} –Ω–∞ –∫–∞—Ä—Ç—É ${bold(escape(card))}:\n${monospaceBlock(errInfoText)}
    `, { reply_markup: getKBCancel() })
  }

  onWithdraw(qiwiAccId, qiwi, { amount, card }).catch(() => {})

  let balanceErr = null
  const balance = await qiwi.getRubAccBalance().catch((err) => { balanceErr = err; return 0 })
  const balanceText = balanceErr ? `–û—à–∏–±–∫–∞: ${escape(balanceErr.message)}` : bold(escape(`${userFormatNumber(balance)}‚ÇΩ`))

  await ctx.reply(dedent`
    ‚úÖ–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${bold(escape(userFormatNumber(amount)))} —Ä—É–± —Å –∫–∏–≤–∏ ${bold(escape(qiwi.wallet))} ${escape(`(${qiwiAccId})`)} –Ω–∞ –∫–∞—Ä—Ç—É ${bold(escape(card))}

    üíµ–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceText}
  `, {
    reply_markup: { remove_keyboard: true },
    parse_mode: 'MarkdownV2',
  })

  return await ctx.scene.enter('MAIN_MENU_SCENE_ID')
})

wizardScene.on('text', async (ctx) => {
  const [amountStr, card] = ctx.message.text.split(' ')
  const amount = parseFloat(amountStr)

  if (!Number.isFinite(amount))
    return await ctx.reply(`–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ`)
  if (!card)
    return await ctx.reply(`–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ`)

  const { qiwiAccId } = ctx.scene.session.state
  const qiwi = qiwiAccsManager.getById(qiwiAccId)

  ctx.scene.session.state = {
    ...ctx.scene.session.state,
    amount,
    qiwiAccId,
    card,
  }

  const text = dedent`
    ‚ùóÔ∏è –ü–µ—Ä–µ–≤–æ–¥–∏–º ${bold(escape(amount.toString()))} —Ä—É–± —Å –∫–∏–≤–∏ ${bold(escape(qiwi.wallet))} ${escape(`(${qiwiAccId})`)} –Ω–∞ –∫–∞—Ä—Ç—É ${bold(escape(card))}
    ‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?
  `
  return await ctx.reply(text, { reply_markup: getKBCancel(true), parse_mode: 'MarkdownV2' })
})
wizardScene.use(async (ctx) => await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞', { reply_markup: getKBCancel() }))

module.exports = wizardScene
